{
  "1": {
    "question": "Write a function that displays the argument it receives surrounded by `'{` and `}'`. For example, if the argument is `5`, the function will print `'{5}'`.",
    "q_file": "fstring_braces.py",
    "exp_op": "'{5}'\n'{hello world}'\n'{[1, 2]}'\n"
  },
  "2": {
    "question": "Write a function that adds two time strings of the format HH:MM:SS (hours, minutes, seconds). Assume that the input can be `0` to `99` for each of the three time components. The output format should be DD-HH:MM:SS where DD stands for number of days. The output should be normalized to not exceed `59` for minutes/seconds and `23` for hours.",
    "q_file": "add_time_strings.py",
    "exp_op": "all tests passed\n"
  },
  "3": {
    "question": "Write a function that returns:\n\n* `Good` for numbers divisible by 7\n* `Food` for numbers divisible by 6\n* `Universe` for numbers divisible by 42\n* `Oops` for all other numbers\n\nOnly one output is expected, with *divisible by 42* taking precedence. This question is based on the popular FizzBuzz test for programmers.",
    "q_file": "6by7.py",
    "exp_op": "all tests passed\n"
  },
  "4": {
    "question": "Check if two strings are same irrespective of case.",
    "q_file": "str_comparison.py",
    "exp_op": "all tests passed\n"
  },
  "5": {
    "question": "Check if two strings are anagrams. Assume that the input strings can contain only alphabets.",
    "q_file": "str_same_letters.py",
    "exp_op": "all tests passed\n"
  },
  "6": {
    "question": "The function `len_int()` should return the length of integer numbers. For non-integer inputs, it should raise an exception as shown below.",
    "q_file": "int_length.py",
    "exp_op": "all tests passed\n"
  },
  "7": {
    "question": "Write a function that prints a styled version of the string argument it receives. Expected output is shown below inside a triple quoted string.",
    "q_file": "string_styling.py",
    "exp_op": "--------\n   hi   \n--------\n***********\n///hello///\n***********\n----------------------------\n          good day          \n----------------------------\n=-==-==-==-==-==-\n   pomegranate   \n=-==-==-==-==-==-\n:::::\n=fig=\n:::::\n"
  },
  "8": {
    "question": "Write a function that returns the maximum nested depth of curly braces in a string. For example, `'{{a+2}*{{b+{c*d}}+e*d}}'` should give `4`. Unbalanced or wrongly ordered braces like `'{a}*b{'` and `'}a+b{'` should return `-1`.",
    "q_file": "count_nested_braces.py",
    "exp_op": "all tests passed\n"
  },
  "9": {
    "question": "Write a function that returns both the minimum and maximum values from an iterable input. Assume that there will be at least one element in the input. Do not use the built-in `min()` and `max()` functions.",
    "q_file": "min_max_iter.py",
    "exp_op": "all tests passed\n"
  },
  "10": {
    "question": "Write a function that sums up zero or more numeric arguments passed to it. The function should also accept a default valued argument `initial` which should be added to the final total. For example, `sum_nums(3, -8)` should give `-5` and `sum_nums(1, 2, 3, 4, 5, initial=5)` should give `20`.",
    "q_file": "sum_numbers.py",
    "exp_op": "all tests passed\n"
  }
}