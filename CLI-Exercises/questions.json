{
    "1": {
        "question": "Display the first 5 lines for the input file `ip.txt`",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "hi there\nhow are you\n\n2 apples\n12 bananas\n",
        "ref_solution": [
            "head -n5 ip.txt"
        ]
    },
    "2": {
        "question": "Display *except* the first 5 lines for the input `blocks.txt`",
        "ip_file": [
            "blocks.txt"
        ],
        "op_file": "42\n1000\n%=%=\nbrown\ngreen\n%=%=\nhi\n",
        "ref_solution": [
            "tail -n +6 blocks.txt"
        ]
    },
    "3": {
        "question": "Extract 5th to 9th byte from the `greeting.txt` file",
        "ip_file": [
            "greeting.txt"
        ],
        "op_file": "here\n",
        "ref_solution": [
            "head -c9 greeting.txt | tail -c +5"
        ]
    },
    "4": {
        "question": "For the input file `sample.txt` filter lines containing `are` or `he` as whole words as well as the line that comes before such a matching line. There should be no separator between the matching groups in the output",
        "ip_file": [
            "sample.txt"
        ],
        "op_file": " 3) Hi there\n 4) How are you\n13) Much ado about nothing\n14) He he he\n",
        "ref_solution": [
            "grep --no-group-separator -B1 -wE 'are|he' sample.txt"
        ]
    },
    "5": {
        "question": "Count the number of empty lines for the input file `ip.txt`",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "3\n",
        "ref_solution": [
            "grep -cx '' ip.txt"
        ]
    },
    "6": {
        "question": "Display all lines from `purchases.txt` except those that contain `tea` or `ash`",
        "ip_file": [
            "purchases.txt"
        ],
        "op_file": "coffee\ncoffee\ntoothpaste\nsoap\n",
        "ref_solution": [
            "grep -vE 'tea|ash' purchases.txt"
        ]
    },
    "7": {
        "question": "For the input file `ip.txt` filter lines starting with `b` or ending with `e` or ending with `es`",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "hi there\n2 apples\nblue sky\nbrown earth\n",
        "ref_solution": [
            "grep -E '^b|es?$' ip.txt"
        ]
    },
    "8": {
        "question": "Extract all whole words starting with `h` or `m` irrespective of case from `sample.txt`",
        "ip_file": [
            "sample.txt"
        ],
        "op_file": "Hello\nHi\nHow\nmango\nMuch\nHe\nhe\nhe\n",
        "ref_solution": [
            "grep -iow '[hm]\\w*' sample.txt"
        ]
    },
    "9": {
        "question": "Display the number of words present in `ip.txt`",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "15\n",
        "ref_solution": [
            "wc -w <ip.txt"
        ]
    },
    "10": {
        "question": "Print the maximum display width for the input file `sample.txt`",
        "ip_file": [
            "sample.txt"
        ],
        "op_file": "26\n",
        "ref_solution": [
            "wc -L <sample.txt"
        ]
    },
    "11": {
        "question": "Sort the contents of `nums_1.txt` numerically",
        "ip_file": [
            "nums_1.txt"
        ],
        "op_file": "-1\n2\n3\n20\n42\n",
        "ref_solution": [
            "sort -n nums_1.txt"
        ]
    },
    "12": {
        "question": "Sort the contents of `nums_2.txt` according to general numerical value",
        "ip_file": [
            "nums_2.txt"
        ],
        "op_file": "-1.53\n42.1e-2\n100\n+120\n3.14e+4\n123456789\n",
        "ref_solution": [
            "sort -g nums_2.txt"
        ]
    },
    "13": {
        "question": "Sort contents of `file_size.txt` based on human readable numbers. Display the results in descending order",
        "ip_file": [
            "file_size.txt"
        ],
        "op_file": "1.4G\tgames\n316M    projects\n746K    report.log\n104K    power.log\n20K     sample.txt\n",
        "ref_solution": [
            "sort -hr file_size.txt"
        ]
    },
    "14": {
        "question": "Sort contents of `timings.txt` based on natural (version) numbers within the text",
        "ip_file": [
            "timings.txt"
        ],
        "op_file": "3m20.058s\n3m42.833s\n4m3.083s\n4m11.130s\n5m35.363s\n",
        "ref_solution": [
            "sort -V timings.txt"
        ]
    },
    "15": {
        "question": "Sort the contents of `duplicates.txt` by the 4th column numbers in descending order. Retain only the first copy of lines with the same number",
        "ip_file": [
            "duplicates.txt"
        ],
        "op_file": "dark red,sky,rose,555\nblue,ruby,water,333\ndark red,ruby,rose,111\nbrown,toy,bread,42\n",
        "ref_solution": [
            "sort -t, -k4,4nr -u duplicates.txt"
        ]
    },
    "16": {
        "question": "For the input file `fruits.txt` retain only unique entries based on the first two characters",
        "ip_file": [
            "fruits.txt"
        ],
        "op_file": "2) banana\n4) pineapple\n5) pear\n6) fig\n",
        "ref_solution": [
            "sort fruits.txt | uniq -u -w2"
        ]
    },
    "17": {
        "question": "Count the number of times input lines are repeated in `colors.txt` and display the results as shown in the expected output panel",
        "ip_file": [
            "colors.txt"
        ],
        "op_file": "      1 green\n      2 blue\n      4 brown\n",
        "ref_solution": [
            "sort colors.txt | uniq -c | sort -n"
        ]
    },
    "18": {
        "question": "Delete the second field for the input `varying_fields.csv`",
        "ip_file": [
            "varying_fields.csv"
        ],
        "op_file": "apple,cherry,fig\n2,4,5,6,7,8\ndragon,centaur,mermaid\n",
        "ref_solution": [
            "cut -d, --complement -f2 varying_fields.csv"
        ]
    },
    "19": {
        "question": "Delete the first three characters from each line for the input `fruits.txt`",
        "ip_file": [
            "fruits.txt"
        ],
        "op_file": "cherry\napple\nbanana\nalmond\napricot\nfig\npineapple\nmango\npear\n",
        "ref_solution": [
            "cut -c4- fruits.txt"
        ]
    },
    "20": {
        "question": "Filter 1st and 3rd fields of `varying_fields.csv` and align the output fields using space characters",
        "ip_file": [
            "varying_fields.csv"
        ],
        "op_file": "apple   cherry\n2       4\ndragon  centaur\n",
        "ref_solution": [
            "cut -d, -f1,3  varying_fields.csv | column -ts,"
        ]
    },
    "21": {
        "question": "Delete other than alphabets, digits and whitespace characters from `blocks.txt`",
        "ip_file": [
            "blocks.txt"
        ],
        "op_file": "\napple\nbanana\n\n314\n42\n1000\n\nbrown\ngreen\n\nhi\n",
        "ref_solution": [
            "tr -dc '[:alnum:][:space:]' <blocks.txt"
        ]
    },
    "22": {
        "question": "Display second column from `varying_fields.csv` as a single row",
        "ip_file": [
            "varying_fields.csv"
        ],
        "op_file": "banana,3,unicorn\n",
        "ref_solution": [
            "cut -d, -f2 varying_fields.csv | paste -sd,"
        ]
    },
    "23": {
        "question": "Combine every two lines of `purchases.txt` using comma as the separator",
        "ip_file": [
            "purchases.txt"
        ],
        "op_file": "coffee,tea\nwashing powder,coffee\ntoothpaste,tea\nsoap,tea\n",
        "ref_solution": [
            "pr -2ats, purchases.txt"
        ]
    },
    "24": {
        "question": "Divide the contents of `blocks.txt` into two equal parts (based on number of lines) and then join these parts vertically using comma as the separator",
        "ip_file": [
            "blocks.txt"
        ],
        "op_file": "%=%=,1000\napple,%=%=\nbanana,brown\n%=%=,green\n3.14,%=%=\n42,hi\n",
        "ref_solution": [
            "pr -2ts, blocks.txt"
        ]
    },
    "25": {
        "question": "Retain only the last three characters of each line from `purchases.txt`",
        "ip_file": [
            "purchases.txt"
        ],
        "op_file": "fee\ntea\nder\nfee\nste\ntea\noap\ntea\n",
        "ref_solution": [
            "grep -o '...$' purchases.txt"
        ]
    },
    "26": {
        "question": "Reshape contents of `varying_fields.csv` such that three fields are displayed per line, separated by tab character",
        "ip_file": [
            "varying_fields.csv"
        ],
        "op_file": "apple\tbanana\tcherry\nfig\t2\t3\n4\t5\t6\n7\t8\tdragon\nunicorn\tcentaur\tmermaid\n",
        "ref_solution": [
            "<varying_fields.csv tr ',' '\\n' | pr -3ats"
        ]
    },
    "27": {
        "question": "For the input file `purchases.txt` replace all occurrences of `tea` with `cake` and `coffee` with `toffee`",
        "ip_file": [
            "purchases.txt"
        ],
        "op_file": "toffee\ncake\nwashing powder\ntoffee\ntoothpaste\ncake\nsoap\ncake\n",
        "ref_solution": [
            "sed 's/tea/cake/g; s/coffee/toffee/g' purchases.txt"
        ]
    },
    "28": {
        "question": "Display contents of `ip.txt` *except* for line numbers 4, 5, 6 and 7",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "hi there\nhow are you\n\nblue sky\nyellow sun\nbrown earth\n",
        "ref_solution": [
            "sed '4,7d' ip.txt"
        ]
    },
    "29": {
        "question": "For the input file `sample.txt` display all lines from the start of the file till the first occurrence of `do`",
        "ip_file": [
            "sample.txt"
        ],
        "op_file": " 1) Hello World\n 2) \n 3) Hi there\n 4) How are you\n 5) \n 6) Just do-it\n",
        "ref_solution": [
            "sed '/do/q' sample.txt"
        ]
    },
    "30": {
        "question": "Delete all groups of lines from a line containing `start` to a line containing `end` for the input file `range.txt`",
        "ip_file": [
            "range.txt"
        ],
        "op_file": "mango\nicecream\nhow are you\nhave a nice day\npar,far,mar,tar\n",
        "ref_solution": [
            "sed '/start/,/end/d' range.txt"
        ]
    },
    "31": {
        "question": "For the input file `anchors.txt` convert markdown anchors to hyperlinks as shown in the excepted output panel",
        "ip_file": [
            "anchors.txt"
        ],
        "op_file": "[Reg Exp](#reg-exp)\n[Sub calls](#sub-calls)\n[dot meta x](#dot-meta-x)\n",
        "ref_solution": [
            "sed -E 's|[^\"]+\"([^\"]+)\"></a>(.+)|[\\2](#\\1)|' anchors.txt"
        ]
    },
    "32": {
        "question": "For the input file `greeting.txt` surround all lowercase vowels with `[]` except for the first two vowels in the line",
        "ip_file": [
            "greeting.txt"
        ],
        "op_file": "Hi ther[e]\nHave [a] n[i]c[e] d[a]y\n",
        "ref_solution": [
            "sed 's/[aeiou]/[&]/3g' greeting.txt"
        ]
    },
    "33": {
        "question": "For the input file `table.txt` calculate and display the product of numbers in the last field of each line",
        "ip_file": [
            "table.txt"
        ],
        "op_file": "-923.16\n",
        "ref_solution": [
            "awk 'BEGIN{p = 1} {p *= $NF} END{print p}' table.txt"
        ]
    },
    "34": {
        "question": "Reverse contents of `blocks.txt` considering `%=%=` as the separator",
        "ip_file": [
            "blocks.txt"
        ],
        "op_file": "%=%=\nhi\n%=%=\nbrown\ngreen\n%=%=\n3.14\n42\n1000\n%=%=\napple\nbanana\n",
        "ref_solution": [
            "tac -bs '%=%=' blocks.txt"
        ]
    },
    "35": {
        "question": "Display all lines from `sample.txt` that contain `do` but not `it`",
        "ip_file": [
            "sample.txt"
        ],
        "op_file": "13) Much ado about nothing\n",
        "ref_solution": [
            "awk '/do/ && !/it/' sample.txt"
        ]
    },
    "36": {
        "question": "For the input file `ip.txt` filter paragraphs containing digit characters",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "2 apples\n12 bananas\n",
        "ref_solution": [
            "awk -v RS= '/[0-9]/' ip.txt"
        ]
    },
    "37": {
        "question": "For the input file `varying_fields.csv` display 3rd field followed by the 1st field. Use `:` as the output field separator",
        "ip_file": [
            "varying_fields.csv"
        ],
        "op_file": "cherry:apple\n4:2\ncentaur:dragon\n",
        "ref_solution": [
            "awk -F, '{print $3 \":\" $1}' varying_fields.csv"
        ]
    },
    "38": {
        "question": "For the input file `ip.txt` filter lines containing 3 or more lowercase vowels",
        "ip_file": [
            "ip.txt"
        ],
        "op_file": "hi there\nhow are you\n12 bananas\nyellow sun\nbrown earth\n",
        "ref_solution": [
            "awk -F'[aeiou]' 'NF>3' ip.txt"
        ]
    },
    "39": {
        "question": "From `blocks.txt` extract only the 3rd block. A line containing `%=%=` determines the start of a block",
        "ip_file": [
            "blocks.txt"
        ],
        "op_file": "%=%=\nbrown\ngreen\n",
        "ref_solution": [
            "awk '$0 == \"%=%=\"{c++} c==3' blocks.txt"
        ]
    },
    "40": {
        "question": "Retain only the first copy of repeated lines from the `duplicates.txt` input file. Use only the contents of the last field for determining duplicates",
        "ip_file": [
            "duplicates.txt"
        ],
        "op_file": "brown,toy,bread,42\ndark red,ruby,rose,111\nblue,ruby,water,333\ndark red,sky,rose,555\n",
        "ref_solution": [
            "awk -F, '!seen[$NF]++' duplicates.txt"
        ]
    }
}
